[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly, render_widget\nimport palmerpenguins # This package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import App, reactive, render, req\n#import ipyleaflet as ipyl\n\n\n# Palmer Penguins Dataset\n# Column names for the penguins data set include:\n# - species: Penguin species (Chinstrap, Adelie, or Gentoo)\n# - island:  island name (Dream, Torgersen, or Biscoe)\n# - bill_length_mm:  length of the bill in millimeters\n# - bill_depth_mm:  depth of the bill in millimeters\n# - flipper_length_mm:  length of the flipper in millimeters\n# - body_mass_g:  body mass in grams\n# - sex:  MALE or FEMALE\n\n# Load the dataset into a pandas Dataframe\n#Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# Name your page\nui.page_opts(title=\"Palmer Penguins JGanyo\", fillable=False)\n\n# Creates user sidebar user interactive \n#and level 2 heading 'Sidebar'\nwith ui.sidebar(open= \"open\"): \n    ui.h2 (\"Sidebar\")\n\n    # Creates a dropdown input to choose a column \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Penguin Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n\n    #Create numeric input for the number of Plotly histogram bins \n    ui.input_numeric(\"plotly_bin_count\", \"Number of Bins\", 25) \n   \n    #Create Slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 50, 5) \n\n    #Create a checkbox group input\n    ui.input_checkbox_group(\n        \"selected_species_list\", \n        \"Species\", \n        [\"Adelie\", \"Gentoo\", \"Chinstrap\" ], \n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"], \n        inline=True,)\n    \n    ui.input_checkbox_group(  \n        \"penguin_islands\",\n        \"Islands\",\n        [\"Torgersen\", \"Biscoe\", \"Dream\"],\n        selected=[\"Dream\"],\n        inline=True,\n    )\n    \n# Add a hyperlink to GitHub Repo\n    ui.a(\"Ganyo GitHub\",\n         href=\"https://github.com/JackieGanyo/cintel-02-data\", \n         target=\"_blank\")\n    \n    #Set horizontal rule\n    ui.hr() \n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        \"Penguins Table\"\n        @render.data_frame\n        def render_penguins_table():\n            return render.DataTable(filtered_data())\n\n    with ui.card(full_screen=True):  # Full screen option\n            \"Penguins Data Grid\"\n            @render.data_frame\n            def render_penguins_grid():\n                return filtered_data()\n\n#Set horizontal rule\nui.hr()\n\n#Create histograms and scatterplots using Plotly and Seaborn\n\nwith ui.layout_columns():\n    \n    #Plotly Histogram Card\n    with ui.card(full_screen=True):\n        \"Plotly By Island Histogram\"\n        \n         # Define custom colors for each category\n        custom_colors = {'Dream': 'skyblue', 'Biscoe': 'salmon', 'Torgersen': 'lightgreen'}\n\n        # Create a function to render the Plotly histogram\n        @render_plotly\n        def render_plotly_histogram():\n            return px.histogram(filtered_data(), \n                                x=\"species\", \n                                color=\"island\",\n                                color_discrete_map=custom_colors)\n    #Seaborn Histogram Card\n    with ui.card(full_screen=True):\n         \"Seaborn Histogram\"\n         #Create custom colors by species\n         \n         \n         @render.plot(alt=\"A Seaborn Histogram with penguin species by island\")\n         def plot():\n                    sns.set_style(\"whitegrid\") # Set Seaborn style to white\n            \n                    ax = sns.histplot(\n                            filtered_data(), \n                            x=\"island\",\n                            y=\"species\",\n                            multiple=\"stack\"\n                                                )\n                    ax.set_title(\"Seaborn Palmer Penguins by Island\")\n                    ax.set_xlabel(\"Island\")\n                    ax.set_ylabel(\"Species\", rotation=90)\n                    return ax\n             \n    #Plotly Scatterplot Card\n    with ui.card(full_screen=True):\n        \"Plotly Scatterplot: Species\"        \n        @render_plotly\n        def ploty_scatterplot():\n            \n            return px.scatter(\n                filtered_data(),\n                x=\"body_mass_g\",\n                y=\"year\",\n                color=\"species\",\n                #facet_row=\"species\", \n                facet_col=\"sex\",\n                labels={\"body_mass_g\": \"Mass (g)\", \"year\": \"Year\"})\n\n#Create interactive map of penguins by location\n\n#penguin_islands = {\n   # \"Biscoe\": (-65.7474, -65.9164),\n   # \"Dream\": (-64.7333, -64.2333),\n   # \"Torgersen\": (-64.7667, -64.0833),\n#}\n#ui.input_select('center', \"Centers\", choices=list(penguin_islands.keys()))\n\n#@render_widget\n#def map():\n    #return ipyl.Map(zoom=6)\n\n#@reactive.effect\n#def _():\n    #map.widget.center = penguin_islands[input.center()]\n \n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[(penguins_df[\"species\"].isin(input.selected_species_list())) &\n        (penguins_df[\"island\"].isin(input.penguin_islands()))]\n", "type": "text"}]